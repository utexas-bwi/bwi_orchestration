#!/usr/bin/env python

import bwi_tools
import rospy
import threading
from PyQt4 import QtGui
import sys

import orc_interface

class OrcInterface(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        rospy.init_node('orc_interface')

        # Get available robots and their controllers
        self.targets = rospy.get_param('~targets')

        # Start the orc interface server
        self.server = orc_interface.Server(self.server_callback)

        self.pending_requests = []
        self.invoked_requests = []
        
        self.interfaces = {} 

        # Setup interfaces
        self.interfaces['move'] = orc_interface.MoveInterface(self.targets)
        self.interfaces['location'] = \
                orc_interface.LocationInterface(self.targets)
        self.interfaces['list'] = orc_interface.ListInterface(self.targets)

        self.modify_pending_req_lock = threading.Lock()

    def run(self):
        rospy.loginfo("Interface starting up...")
        self.server.start()
        rate = bwi_tools.WallRate(10)
        try:
            while not rospy.is_shutdown():

                # Check new requests first in case an old request gets preempted
                self.modify_pending_req_lock.acquire()
                for request in self.pending_requests:
                    rospy.loginfo("Handling request: %s"%str(request))
                    self.handle_request(request)
                self.pending_requests = []
                self.modify_pending_req_lock.release()

                # Check status of all invoked requests
                completed_requests = []
                for request in self.invoked_requests:
                    completed, message = self.check_status(request)
                    if completed:
                        client_name = request[0]
                        message = message.to_dict()
                        rospy.loginfo(
                            "Request completed, sending: %s"%str(message))
                        self.server.send_message(client_name, message)
                        completed_requests.append(request)
                self.invoked_requests = [x for x in self.invoked_requests
                                         if x not in completed_requests]

                # Sleep for remaining duration
                rate.sleep()
        except rospy.ROSInterruptException:
            pass
        self.server.shutdown()
        self.server.join()
        rospy.loginfo("Interface shutting down...")

    def server_callback(self, client_name, data):
        message = orc_interface.InterfaceMessage(client_name, data)
        if not message.is_valid():
            rospy.logerr("Received invalid message from %s"%client_name)
            return False
        if message.is_request():
            self.modify_pending_req_lock.acquire()
            self.pending_requests.append(message)
            self.modify_pending_req_lock.release()
            rospy.loginfo("Received valid request: %s"%str(message))
        else:
            rospy.logerr("Received response message (NOT request): %s"%str(message))
        return True

    def handle_request(self, request):
        interface = self.interfaces[request.method]
        if request.type == orc_interface.INVOKE:
            interface.invoke(request.call_id, request.target, request.args)
            self.invoked_requests.append(
                (request.client_name, request.method, request.call_id)
            )
        elif request.type == orc_interface.CANCEL:
            interface.cancel(request.call_id)

    def check_status(self, request):
        interface = self.interfaces[request[1]]
        call_id = request[2]
        return interface.check_status(call_id)

if __name__ == '__main__':
    try:
        app = QtGui.QApplication(sys.argv)
        server = OrcInterface()
        server.start()
        app.exec_()
        server.join()
        sys.exit(0)
    except rospy.ROSInterruptException:
        pass
